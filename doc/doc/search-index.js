var searchIndex = JSON.parse('{\
"pc_mqtt_rs":{"doc":"Process Control Hyperdrive MQTT project (Rust version)","t":"DDNDNNNNNDNNDEDNDNNEDNNNNNFAMFMFMMMAMFMMMMMMMMMAAAAADLLLLLLMLLLMDLLLLLMLLLLMDLLMLMLMLLLLLLMDLLLLLLLLLMMDLLLLLLMMLLLMAAAADDDLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLNNNNNENNLLLLLLLLNNNNNENNNNLLLLLLLLFFFF","n":["Blink","ClientWrapper","Connect","ConnectionWrapper","Discover","Emergency","Emergency","HostI","HostS","Lane","Lane","Lights","Mqtt","Payload","Relay","Relay","Speed","Speed","SpeedE","Topic","Track","VehicleE","VehicleI","VehicleS","Zone","Zone200","blocking_emergency_handler","client","client","connect_vehicles","connection","discover_vehicles","emergency","inside_slow_zone","last_speed","library","offsets","set_ctrlc_handler","slow_tracks","slow_vehicles","state","vehicle_list","vehicle_list","vehicle_list","vehicles","vehicles","velocity_list","blink","lane","relay","speed","track","Blink","borrow","borrow_mut","from","into","new","run","state","try_from","try_into","type_id","vehicles","Lane","borrow","borrow_mut","from","into","new","offsets","run","try_from","try_into","type_id","vehicles","Relay","borrow","borrow_mut","emergency","from","inside_slow_zone","into","last_speed","loop_forever","new","run","try_from","try_into","type_id","vehicle_list","Speed","borrow","borrow_mut","from","into","new","run","try_from","try_into","type_id","vehicle_list","velocity_list","Track","borrow","borrow_mut","from","into","new","run","slow_tracks","slow_vehicles","try_from","try_into","type_id","vehicle_list","mqtt","payload","topic","util","ClientWrapper","ConnectionWrapper","Mqtt","arc_clone","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","connection","from","from","from","init_client","into","into","into","new","publish","set_options","start_loop","subscribe","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unsubscribe","Connect","Discover","Emergency","Lane","Lights","Payload","Speed","Zone200","borrow","borrow_mut","from","get","into","try_from","try_into","type_id","Emergency","HostI","HostS","Relay","SpeedE","Topic","VehicleE","VehicleI","VehicleS","Zone","borrow","borrow_mut","from","get","into","try_from","try_into","type_id","blocking_emergency_handler","connect_vehicles","discover_vehicles","set_ctrlc_handler"],"q":[[0,"pc_mqtt_rs"],[47,"pc_mqtt_rs::client"],[52,"pc_mqtt_rs::client::blink"],[64,"pc_mqtt_rs::client::lane"],[76,"pc_mqtt_rs::client::relay"],[91,"pc_mqtt_rs::client::speed"],[103,"pc_mqtt_rs::client::track"],[116,"pc_mqtt_rs::library"],[120,"pc_mqtt_rs::library::mqtt"],[154,"pc_mqtt_rs::library::payload"],[170,"pc_mqtt_rs::library::topic"],[188,"pc_mqtt_rs::library::util"],[192,"alloc::string"],[193,"alloc::vec"],[194,"rumqttc::mqttbytes::v4::publish"],[195,"std::sync::mpsc"],[196,"core::error"],[197,"alloc::boxed"],[198,"core::result"],[199,"std::thread"],[200,"core::any"],[201,"rumqttc::client"],[202,"rumqttc::client"]],"d":["Holds the current state and a list of vehicles.","Rumqttc client wrapper, wraps the client in an Arc&lt;Mutex&lt;…","","","","","","","","Struct holding the offsets and a list of vehicles.","","","","An enum that holds most of the payloads/messagess used in …","The Relay struct holds a list of vehicle IDs, the …","","Struct holding lists of velocities and vehicles.","","","An enum that holds almost all the topics used in the …","","","","","","","Blocks thread and publishes emergency messages on the …","","","Sends Connect(true) to each vehicle.","","Asks for discovered vehicle IDs and prints them to stdout.","","","","","","Sets up a handler to disconnect vehicles on CTRL+C.","","","Current state of the lights.","","","","A list of vehicles IDs.","","","The blink module is the simplest of the three steering …","This lane module is part of the steering controller.","This module contains the Relay struct and its methods. It …","This speed module is part of the steering controller.","Track module which also includes the personal addition.","Holds the current state and a list of vehicles.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a new instance of Blink.","Runs the client in a separate thread, consuming it.","Current state of the lights.","","","","A list of vehicles IDs.","Struct holding the offsets and a list of vehicles.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of Lane.","","Main logic of the lane client.","","","","","The Relay struct holds a list of vehicle IDs, the …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Handles all incoming messages and relays them to the …","Create a new Relay struct with a list of vehicle IDs.","Run the client and return it’s thread handle.","","","","","Struct holding lists of velocities and vehicles.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of Speed.","Main logic of the speed client.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Main logic of the track client.","","","","","","","This module contains the MQTT client and connection …","This module contains payloads/messages used in the …","This module contains the topics, making it both easier to …","Utility functions that are removed from main.rs.","Rumqttc client wrapper, wraps the client in an Arc&lt;Mutex&lt;…","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new MQTT Client/Connection pair.","","","Iterates over Connection and send incoming publish event …","","","","","","","","","","","","","","","","","An enum that holds most of the payloads/messagess used in …","","","","","Returns the argument unchanged.","Formats hardcoded payload strings with the values inside …","Calls <code>U::from(self)</code>.","","","","","","","","","An enum that holds almost all the topics used in the …","","","","","","","Returns the argument unchanged.","Formats hardcoded topic strings with the values inside the …","Calls <code>U::from(self)</code>.","","","","Blocks thread and publishes emergency messages on the …","Sends Connect(true) to each vehicle.","Asks for discovered vehicle IDs and prints them to stdout.","Sets up a handler to disconnect vehicles on CTRL+C."],"i":[0,0,25,0,25,25,26,26,26,0,25,25,0,0,0,26,0,25,26,0,0,26,26,26,26,25,0,0,1,0,23,0,16,16,16,0,15,0,19,19,11,16,17,19,11,15,17,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,0,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,1,27,1,23,27,1,23,1,23,27,1,23,27,27,1,23,27,1,27,23,1,27,1,23,27,1,23,27,1,23,1,25,25,25,25,25,0,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[1,[4,[3]]],2],0,[[1,[6,[5]]],[[9,[[4,[3]],[8,[7]]]]]],0,0,0,0,0,[[1,[10,[3]]],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[10,[3]]],11],[11,[[12,[2]]]],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[10,[14]],[10,[3]]],15],0,[15,[[12,[2]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],0,[-1,-2,[],[]],0,[16,2],[[[10,[3]]],16],[16,[[12,[2]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[10,[14]],[10,[3]]],17],[17,[[12,[2]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[10,[3]],[10,[18]]],19],[19,[[12,[2]]]],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,0,[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,[[2,[21,22]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,[[2,[1,23]]]],[[1,20,20],2],[20,24],[23,[[6,[5]]]],[[1,20],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[[1,20],2],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[25,3],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[26,3],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,13,[]],[1,2],[[1,[4,[3]]],2],[[1,[6,[5]]],[[9,[[4,[3]],[8,[7]]]]]],[[1,[10,[3]]],2]],"c":[],"p":[[3,"ClientWrapper",120],[15,"tuple"],[3,"String",192],[3,"Vec",193],[3,"Publish",194],[3,"Receiver",195],[8,"Error",196],[3,"Box",197],[4,"Result",198],[15,"slice"],[3,"Blink",52],[3,"JoinHandle",199],[3,"TypeId",200],[15,"i16"],[3,"Lane",64],[3,"Relay",76],[3,"Speed",91],[15,"u64"],[3,"Track",103],[15,"str"],[3,"Client",201],[3,"Connection",201],[3,"ConnectionWrapper",120],[3,"MqttOptions",202],[4,"Payload",154],[4,"Topic",170],[3,"Mqtt",120]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
